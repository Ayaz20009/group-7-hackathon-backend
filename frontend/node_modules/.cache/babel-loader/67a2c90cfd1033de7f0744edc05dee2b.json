{"ast":null,"code":"import { ObjectId } from \"bson\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nexport default function useTaskMutations(project) {\n  return {\n    addTask: useAddTask(project),\n    updateTask: useUpdateTask(project),\n    deleteTask: useDeleteTask(project)\n  };\n} // TODO: Add the GraphGL mutation for adding a task.\n\nconst AddTaskMutation = gql`mutation AddTask($task: TaskInsertInput!) {\n  addedTask: insertOneTask(data: $task) {\n    _id\n    _partition\n    name\n    status\n  }\n}`; // TODO: Add the GraphGL mutation for updating a task.\n\nconst UpdateTaskMutation = gql`mutation UpdateTask($taskId: ObjectId!, $updates: TaskUpdateInput!) {\n  updatedTask: updateOneTask(query: { _id: $taskId }, set: $updates) {\n    _id\n    _partition\n    name\n    status\n  }\n}`; // TODO: Add the GraphGL mutation for deleting a task.\n\nconst DeleteTaskMutation = gql`mutation DeleteTask($taskId: ObjectId!) {\n  deletedTask: deleteOneTask(query: { _id: taskId }) {\n    _id\n    _partition\n    name\n    status\n  }\n}`;\nconst TaskFieldsFragment = gql`\n  fragment TaskFields on Task {\n    _id\n    _partition\n    status\n    name\n  }\n`;\n\nfunction useAddTask(project) {\n  const [addTaskMutation] = useMutation(AddTaskMutation, {\n    // Manually save added Tasks into the Apollo cache so that Task queries automatically update\n    // For details, refer to https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    update: (cache, _ref) => {\n      let {\n        data: {\n          addedTask\n        }\n      } = _ref;\n      cache.modify({\n        fields: {\n          tasks: function () {\n            let existingTasks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n            return [...existingTasks, cache.writeFragment({\n              data: addedTask,\n              fragment: TaskFieldsFragment\n            })];\n          }\n        }\n      });\n    }\n  });\n\n  const addTask = async task => {\n    // TODO: Use the functions returned from the addTaskMutation hook to execute the\n    // mutation.\n    const {\n      addedTask\n    } = await addTaskMutation({\n      variables: {\n        task: {\n          _id: new ObjectId(),\n          _partition: project.partition,\n          status: \"Open\",\n          ...task\n        }\n      }\n    });\n    return addedTask;\n  };\n\n  return addTask;\n}\n\nfunction useUpdateTask(project) {\n  const [updateTaskMutation] = useMutation(UpdateTaskMutation);\n\n  const updateTask = async (task, updates) => {\n    const {\n      updatedTask\n    } = await updateTaskMutation({\n      variables: {\n        taskId: task._id,\n        updates\n      }\n    });\n    return updatedTask;\n  };\n\n  return updateTask;\n}\n\nfunction useDeleteTask(project) {\n  const [deleteTaskMutation] = useMutation(DeleteTaskMutation);\n\n  const deleteTask = async task => {\n    const {\n      deletedTask\n    } = await deleteTaskMutation({\n      variables: {\n        taskId: task._id\n      }\n    });\n    return deletedTask;\n  };\n\n  return deleteTask;\n}","map":{"version":3,"names":["ObjectId","useMutation","gql","useTaskMutations","project","addTask","useAddTask","updateTask","useUpdateTask","deleteTask","useDeleteTask","AddTaskMutation","UpdateTaskMutation","DeleteTaskMutation","TaskFieldsFragment","addTaskMutation","update","cache","data","addedTask","modify","fields","tasks","existingTasks","writeFragment","fragment","task","variables","_id","_partition","partition","status","updateTaskMutation","updates","updatedTask","taskId","deleteTaskMutation","deletedTask"],"sources":["/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/graphql/useTaskMutations.js"],"sourcesContent":["import { ObjectId } from \"bson\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nexport default function useTaskMutations(project) {\n  return {\n    addTask: useAddTask(project),\n    updateTask: useUpdateTask(project),\n    deleteTask: useDeleteTask(project),\n  };\n}\n\n// TODO: Add the GraphGL mutation for adding a task.\nconst AddTaskMutation = gql`mutation AddTask($task: TaskInsertInput!) {\n  addedTask: insertOneTask(data: $task) {\n    _id\n    _partition\n    name\n    status\n  }\n}`;\n\n// TODO: Add the GraphGL mutation for updating a task.\nconst UpdateTaskMutation = gql`mutation UpdateTask($taskId: ObjectId!, $updates: TaskUpdateInput!) {\n  updatedTask: updateOneTask(query: { _id: $taskId }, set: $updates) {\n    _id\n    _partition\n    name\n    status\n  }\n}`;\n\n// TODO: Add the GraphGL mutation for deleting a task.\nconst DeleteTaskMutation = gql`mutation DeleteTask($taskId: ObjectId!) {\n  deletedTask: deleteOneTask(query: { _id: taskId }) {\n    _id\n    _partition\n    name\n    status\n  }\n}`;\n\nconst TaskFieldsFragment = gql`\n  fragment TaskFields on Task {\n    _id\n    _partition\n    status\n    name\n  }\n`;\n\nfunction useAddTask(project) {\n  const [addTaskMutation] = useMutation(AddTaskMutation, {\n    // Manually save added Tasks into the Apollo cache so that Task queries automatically update\n    // For details, refer to https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    update: (cache, { data: { addedTask } }) => {\n      cache.modify({\n        fields: {\n          tasks: (existingTasks = []) => [\n            ...existingTasks,\n            cache.writeFragment({\n              data: addedTask,\n              fragment: TaskFieldsFragment,\n            }),\n          ],\n        },\n      });\n    },\n  });\n\n  const addTask = async (task) => {\n    // TODO: Use the functions returned from the addTaskMutation hook to execute the\n    // mutation.\n    const { addedTask } = await addTaskMutation({\n      variables: {\n        task: {\n          _id: new ObjectId(),\n          _partition: project.partition,\n          status: \"Open\",\n          ...task,\n        },\n      },\n    });\n    return addedTask;\n  };\n\n  return addTask;\n}\n\nfunction useUpdateTask(project) {\n  const [updateTaskMutation] = useMutation(UpdateTaskMutation);\n  const updateTask = async (task, updates) => {\n    const { updatedTask } = await updateTaskMutation({\n      variables: { taskId: task._id, updates },\n    });\n    return updatedTask;\n  };\n  return updateTask;\n}\n\nfunction useDeleteTask(project) {\n  const [deleteTaskMutation] = useMutation(DeleteTaskMutation);\n  const deleteTask = async (task) => {\n    const { deletedTask } = await deleteTaskMutation({\n      variables: { taskId: task._id },\n    });\n    return deletedTask;\n  };\n  return deleteTask;\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EAChD,OAAO;IACLC,OAAO,EAAEC,UAAU,CAACF,OAAD,CADd;IAELG,UAAU,EAAEC,aAAa,CAACJ,OAAD,CAFpB;IAGLK,UAAU,EAAEC,aAAa,CAACN,OAAD;EAHpB,CAAP;AAKD,C,CAED;;AACA,MAAMO,eAAe,GAAGT,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,EAPA,C,CASA;;AACA,MAAMU,kBAAkB,GAAGV,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,EAPA,C,CASA;;AACA,MAAMW,kBAAkB,GAAGX,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,EAPA;AASA,MAAMY,kBAAkB,GAAGZ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASI,UAAT,CAAoBF,OAApB,EAA6B;EAC3B,MAAM,CAACW,eAAD,IAAoBd,WAAW,CAACU,eAAD,EAAkB;IACrD;IACA;IACAK,MAAM,EAAE,CAACC,KAAD,WAAoC;MAAA,IAA5B;QAAEC,IAAI,EAAE;UAAEC;QAAF;MAAR,CAA4B;MAC1CF,KAAK,CAACG,MAAN,CAAa;QACXC,MAAM,EAAE;UACNC,KAAK,EAAE;YAAA,IAACC,aAAD,uEAAiB,EAAjB;YAAA,OAAwB,CAC7B,GAAGA,aAD0B,EAE7BN,KAAK,CAACO,aAAN,CAAoB;cAClBN,IAAI,EAAEC,SADY;cAElBM,QAAQ,EAAEX;YAFQ,CAApB,CAF6B,CAAxB;UAAA;QADD;MADG,CAAb;IAWD;EAfoD,CAAlB,CAArC;;EAkBA,MAAMT,OAAO,GAAG,MAAOqB,IAAP,IAAgB;IAC9B;IACA;IACA,MAAM;MAAEP;IAAF,IAAgB,MAAMJ,eAAe,CAAC;MAC1CY,SAAS,EAAE;QACTD,IAAI,EAAE;UACJE,GAAG,EAAE,IAAI5B,QAAJ,EADD;UAEJ6B,UAAU,EAAEzB,OAAO,CAAC0B,SAFhB;UAGJC,MAAM,EAAE,MAHJ;UAIJ,GAAGL;QAJC;MADG;IAD+B,CAAD,CAA3C;IAUA,OAAOP,SAAP;EACD,CAdD;;EAgBA,OAAOd,OAAP;AACD;;AAED,SAASG,aAAT,CAAuBJ,OAAvB,EAAgC;EAC9B,MAAM,CAAC4B,kBAAD,IAAuB/B,WAAW,CAACW,kBAAD,CAAxC;;EACA,MAAML,UAAU,GAAG,OAAOmB,IAAP,EAAaO,OAAb,KAAyB;IAC1C,MAAM;MAAEC;IAAF,IAAkB,MAAMF,kBAAkB,CAAC;MAC/CL,SAAS,EAAE;QAAEQ,MAAM,EAAET,IAAI,CAACE,GAAf;QAAoBK;MAApB;IADoC,CAAD,CAAhD;IAGA,OAAOC,WAAP;EACD,CALD;;EAMA,OAAO3B,UAAP;AACD;;AAED,SAASG,aAAT,CAAuBN,OAAvB,EAAgC;EAC9B,MAAM,CAACgC,kBAAD,IAAuBnC,WAAW,CAACY,kBAAD,CAAxC;;EACA,MAAMJ,UAAU,GAAG,MAAOiB,IAAP,IAAgB;IACjC,MAAM;MAAEW;IAAF,IAAkB,MAAMD,kBAAkB,CAAC;MAC/CT,SAAS,EAAE;QAAEQ,MAAM,EAAET,IAAI,CAACE;MAAf;IADoC,CAAD,CAAhD;IAGA,OAAOS,WAAP;EACD,CALD;;EAMA,OAAO5B,UAAP;AACD"},"metadata":{},"sourceType":"module"}