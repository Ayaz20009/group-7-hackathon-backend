{"ast":null,"code":"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\"; // TODO: Add the GraphGL query for fetching all tasks.\n\nconst GetAllTasksQuery = gql`\n  query GetAllTasksForProject($partition: String!) {\n    tasks(query: { _partition: $partition }) {\n      _id\n      name\n      status\n    }\n  }\n`;\nexport function useAllTasksInProject(project) {\n  var _data$tasks;\n\n  // TODO: Use GetAllTasksQuery to fetch the tasks for the project every 1000ms\n  const {\n    data,\n    loading,\n    error,\n    startPolling,\n    stopPolling\n  } = useQuery(GetAllTasksQuery, {\n    variables: {\n      partition: project.partition\n    }\n  });\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(`Failed to fetch tasks: ${error.message}`);\n  } // If the query has finished, return the tasks from the result data\n  // Otherwise, return an empty list\n\n\n  const tasks = (_data$tasks = data === null || data === void 0 ? void 0 : data.tasks) !== null && _data$tasks !== void 0 ? _data$tasks : [];\n  return {\n    tasks,\n    loading\n  };\n}","map":{"version":3,"names":["React","useQuery","gql","GetAllTasksQuery","useAllTasksInProject","project","data","loading","error","startPolling","stopPolling","variables","partition","useEffect","Error","message","tasks"],"sources":["/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/graphql/useTaskQueries.js"],"sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\n// TODO: Add the GraphGL query for fetching all tasks.\nconst GetAllTasksQuery = gql`\n  query GetAllTasksForProject($partition: String!) {\n    tasks(query: { _partition: $partition }) {\n      _id\n      name\n      status\n    }\n  }\n`;\n\nexport function useAllTasksInProject(project) {\n  // TODO: Use GetAllTasksQuery to fetch the tasks for the project every 1000ms\n  const { data, loading, error, startPolling, stopPolling } = useQuery(\n    GetAllTasksQuery,\n    {\n      variables: {\n        partition: project.partition,\n      },\n    }\n  );\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n  if (error) {\n    throw new Error(`Failed to fetch tasks: ${error.message}`);\n  }\n\n  // If the query has finished, return the tasks from the result data\n  // Otherwise, return an empty list\n  const tasks = data?.tasks ?? [];\n  return {\n    tasks,\n    loading,\n  };\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAEA;;AACA,MAAMC,gBAAgB,GAAGD,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,OAAO,SAASE,oBAAT,CAA8BC,OAA9B,EAAuC;EAAA;;EAC5C;EACA,MAAM;IAAEC,IAAF;IAAQC,OAAR;IAAiBC,KAAjB;IAAwBC,YAAxB;IAAsCC;EAAtC,IAAsDT,QAAQ,CAClEE,gBADkE,EAElE;IACEQ,SAAS,EAAE;MACTC,SAAS,EAAEP,OAAO,CAACO;IADV;EADb,CAFkE,CAApE;EAQAZ,KAAK,CAACa,SAAN,CAAgB,MAAM;IACpB;IACAJ,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;;IACA,OAAO,MAAMC,WAAW,EAAxB;EACD,CALD,EAKG,CAACD,YAAD,EAAeC,WAAf,CALH;;EAMA,IAAIF,KAAJ,EAAW;IACT,MAAM,IAAIM,KAAJ,CAAW,0BAAyBN,KAAK,CAACO,OAAQ,EAAlD,CAAN;EACD,CAlB2C,CAoB5C;EACA;;;EACA,MAAMC,KAAK,kBAAGV,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEU,KAAT,qDAAkB,EAA7B;EACA,OAAO;IACLA,KADK;IAELT;EAFK,CAAP;AAID"},"metadata":{},"sourceType":"module"}