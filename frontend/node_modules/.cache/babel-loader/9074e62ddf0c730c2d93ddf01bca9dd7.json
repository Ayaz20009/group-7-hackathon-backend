{"ast":null,"code":"var _jsxFileName = \"/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/graphql/RealmApolloProvider.js\";\nimport React from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from \"@apollo/client\"; // Create an ApolloClient that connects to the provided Realm.App's GraphQL API\n\nconst createRealmApolloClient = app => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      } // Refreshing a user's custom data also refreshes their access token\n\n\n      await app.currentUser.refreshCustomData(); // The handler adds a bearer token Authorization header to the otherwise unchanged request\n\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    }\n  });\n  const cache = new InMemoryCache();\n  return new ApolloClient({\n    link,\n    cache\n  });\n};\n\nexport default function RealmApolloProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  }, children);\n}","map":{"version":3,"names":["React","useRealmApp","ApolloClient","HttpLink","InMemoryCache","ApolloProvider","createRealmApolloClient","app","link","uri","id","fetch","options","currentUser","Error","refreshCustomData","headers","Authorization","accessToken","cache","RealmApolloProvider","children","client","setClient","useState","useEffect"],"sources":["/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/graphql/RealmApolloProvider.js"],"sourcesContent":["import React from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app) => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData();\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,gBALP,C,CAOA;;AACA,MAAMC,uBAAuB,GAAIC,GAAD,IAAS;EACvC,MAAMC,IAAI,GAAG,IAAIL,QAAJ,CAAa;IACxB;IACAM,GAAG,EAAG,iDAAgDF,GAAG,CAACG,EAAG,UAFrC;IAGxB;IACAC,KAAK,EAAE,OAAOF,GAAP,EAAYG,OAAZ,KAAwB;MAC7B,IAAI,CAACL,GAAG,CAACM,WAAT,EAAsB;QACpB,MAAM,IAAIC,KAAJ,CAAW,0CAAX,CAAN;MACD,CAH4B,CAI7B;;;MACA,MAAMP,GAAG,CAACM,WAAJ,CAAgBE,iBAAhB,EAAN,CAL6B,CAM7B;;MACAH,OAAO,CAACI,OAAR,CAAgBC,aAAhB,GAAiC,UAASV,GAAG,CAACM,WAAJ,CAAgBK,WAAY,EAAtE;MACA,OAAOP,KAAK,CAACF,GAAD,EAAMG,OAAN,CAAZ;IACD;EAbuB,CAAb,CAAb;EAgBA,MAAMO,KAAK,GAAG,IAAIf,aAAJ,EAAd;EAEA,OAAO,IAAIF,YAAJ,CAAiB;IAAEM,IAAF;IAAQW;EAAR,CAAjB,CAAP;AACD,CApBD;;AAuBA,eAAe,SAASC,mBAAT,OAA2C;EAAA,IAAd;IAAEC;EAAF,CAAc;EACxD,MAAMd,GAAG,GAAGN,WAAW,EAAvB;EACA,MAAM,CAACqB,MAAD,EAASC,SAAT,IAAsBvB,KAAK,CAACwB,QAAN,CAAelB,uBAAuB,CAACC,GAAD,CAAtC,CAA5B;EACAP,KAAK,CAACyB,SAAN,CAAgB,MAAM;IACpBF,SAAS,CAACjB,uBAAuB,CAACC,GAAD,CAAxB,CAAT;EACD,CAFD,EAEG,CAACA,GAAD,CAFH;EAGA,oBAAO,oBAAC,cAAD;IAAgB,MAAM,EAAEe,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAiCD,QAAjC,CAAP;AACD"},"metadata":{},"sourceType":"module"}