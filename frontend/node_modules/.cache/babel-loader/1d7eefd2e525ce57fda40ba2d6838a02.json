{"ast":null,"code":"import { useRealmApp } from \"../RealmApp\";\nimport React from \"react\"; // TODO: Retrieve the current user's projects and assign it to `projects`\n// with refresh when their project list is updated.\n\nfunction setProjectsFromChange(change, setProjects) {\n  const {\n    fullDocument: {\n      memberOf\n    }\n  } = change;\n  setProjects(memberOf);\n}\n\nexport default function useProjects() {\n  const app = useRealmApp();\n  const [projects, setProjects] = React.useState(app.currentUser.customData.memberOf);\n\n  if (!app.currentUser) {\n    throw new Error(\"Cannot list projects if there is no logged in user.\");\n  }\n\n  const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\n  const users = mongodb.db(\"tracker\").collection(\"User\"); // set asynchronous event watcher to react to any changes in the users collection\n\n  React.useEffect(() => {\n    let changeWatcher;\n\n    (async () => {\n      changeWatcher = users.watch();\n\n      for await (const change of changeWatcher) {\n        setProjectsFromChange(change, setProjects);\n      }\n    })(); // close connection when component unmounts\n\n\n    return () => changeWatcher.return();\n  });\n  return projects;\n}","map":{"version":3,"names":["useRealmApp","React","setProjectsFromChange","change","setProjects","fullDocument","memberOf","useProjects","app","projects","useState","currentUser","customData","Error","mongodb","mongoClient","users","db","collection","useEffect","changeWatcher","watch","return"],"sources":["/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/graphql/useProjects.js"],"sourcesContent":["import { useRealmApp } from \"../RealmApp\";\nimport React from \"react\";\n\n// TODO: Retrieve the current user's projects and assign it to `projects`\n// with refresh when their project list is updated.\n\nfunction setProjectsFromChange(change, setProjects) {\n  const {\n    fullDocument: { memberOf },\n  } = change;\n  setProjects(memberOf);\n}\n\nexport default function useProjects() {\n  const app = useRealmApp();\n  const [projects, setProjects] = React.useState(\n    app.currentUser.customData.memberOf\n  );\n  if (!app.currentUser) {\n    throw new Error(\"Cannot list projects if there is no logged in user.\");\n  }\n  const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\n  const users = mongodb.db(\"tracker\").collection(\"User\");\n\n  // set asynchronous event watcher to react to any changes in the users collection\n  React.useEffect(() => {\n    let changeWatcher;\n    (async () => {\n      changeWatcher = users.watch();\n      for await (const change of changeWatcher) {\n        setProjectsFromChange(change, setProjects);\n      }\n    })();\n\n    // close connection when component unmounts\n    return () => changeWatcher.return();\n  });\n\n  return projects;\n}"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AAEA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,WAAvC,EAAoD;EAClD,MAAM;IACJC,YAAY,EAAE;MAAEC;IAAF;EADV,IAEFH,MAFJ;EAGAC,WAAW,CAACE,QAAD,CAAX;AACD;;AAED,eAAe,SAASC,WAAT,GAAuB;EACpC,MAAMC,GAAG,GAAGR,WAAW,EAAvB;EACA,MAAM,CAACS,QAAD,EAAWL,WAAX,IAA0BH,KAAK,CAACS,QAAN,CAC9BF,GAAG,CAACG,WAAJ,CAAgBC,UAAhB,CAA2BN,QADG,CAAhC;;EAGA,IAAI,CAACE,GAAG,CAACG,WAAT,EAAsB;IACpB,MAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;EACD;;EACD,MAAMC,OAAO,GAAGN,GAAG,CAACG,WAAJ,CAAgBI,WAAhB,CAA4B,eAA5B,CAAhB;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,EAAR,CAAW,SAAX,EAAsBC,UAAtB,CAAiC,MAAjC,CAAd,CAToC,CAWpC;;EACAjB,KAAK,CAACkB,SAAN,CAAgB,MAAM;IACpB,IAAIC,aAAJ;;IACA,CAAC,YAAY;MACXA,aAAa,GAAGJ,KAAK,CAACK,KAAN,EAAhB;;MACA,WAAW,MAAMlB,MAAjB,IAA2BiB,aAA3B,EAA0C;QACxClB,qBAAqB,CAACC,MAAD,EAASC,WAAT,CAArB;MACD;IACF,CALD,IAFoB,CASpB;;;IACA,OAAO,MAAMgB,aAAa,CAACE,MAAd,EAAb;EACD,CAXD;EAaA,OAAOb,QAAP;AACD"},"metadata":{},"sourceType":"module"}