{"ast":null,"code":"var _jsxFileName = \"/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/components/LoginScreen.js\";\nimport React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"../RealmApp\";\nimport styled from \"@emotion/styled\";\nimport Button from \"@leafygreen-ui/button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport LGCard from \"./Card\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport validator from \"validator\";\nimport Loading from \"./Loading\";\nexport default function LoginScreen() {\n  const app = useRealmApp(); // Toggle between logging users in and registering new users\n\n  const [mode, setMode] = React.useState(\"login\");\n\n  const toggleMode = () => {\n    setMode(oldMode => oldMode === \"login\" ? \"register\" : \"login\");\n  }; // Keep track of form input state\n\n\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\"); // Keep track of input validation/errors\n\n  const [error, setError] = React.useState({}); // Whenever the mode changes, clear the form inputs\n\n  React.useEffect(() => {\n    setEmail(\"email@company.com\");\n    setPassword(\"password\");\n    setError({});\n  }, [mode]);\n  const [isLoggingIn, setIsLoggingIn] = React.useState(false);\n\n  const handleLogin = async () => {\n    setIsLoggingIn(true);\n    setError(e => ({ ...e,\n      password: null\n    }));\n\n    try {\n      // TODO: Call the logIn() method and pass it the emailPassword credentials.\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n    } catch (err) {\n      handleAuthenticationError(err, setError);\n    }\n  };\n\n  const handleRegistrationAndLogin = async () => {\n    const isValidEmailAddress = validator.isEmail(email);\n    setError(e => ({ ...e,\n      password: null\n    }));\n\n    if (isValidEmailAddress) {\n      try {\n        // Register the user and, if successful, log them in\n        // TODO: Create new emailPassword credentials by calling the registerUser() method.\n        await app.emailPasswordAuth.registerUser(email, password);\n        return await handleLogin();\n      } catch (err) {\n        handleAuthenticationError(err, setError);\n      }\n    } else {\n      setError(err => ({ ...err,\n        email: \"Email is invalid.\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, isLoggingIn ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoginFormRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LoginHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, mode === \"login\" ? \"Log In\" : \"Register a Company\")), /*#__PURE__*/React.createElement(LoginFormRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    type: \"email\",\n    label: \"Email\",\n    placeholder: \"your.email@example.com\",\n    onChange: e => {\n      setError(e => ({ ...e,\n        email: null\n      }));\n      setEmail(e.target.value);\n    },\n    value: email,\n    state: error.email ? \"error\" : validator.isEmail(email) ? \"valid\" : \"none\",\n    errorMessage: error.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(LoginFormRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    type: \"password\",\n    label: \"Password\",\n    placeholder: \"pa55w0rd\",\n    onChange: e => {\n      setPassword(e.target.value);\n    },\n    value: password,\n    state: error.password ? \"error\" : error.password ? \"valid\" : \"none\",\n    errorMessage: error.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  })), mode === \"login\" ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: () => handleLogin(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Log In\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: () => handleRegistrationAndLogin(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(ToggleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToggleText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, mode === \"login\" ? \"Don't have an account?\" : \"Already have an account?\"), /*#__PURE__*/React.createElement(ToggleLink, {\n    onClick: e => {\n      e.preventDefault();\n      toggleMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, mode === \"login\" ? \"Register one now.\" : \"Log in instead.\"))));\n}\n\nfunction handleAuthenticationError(err, setError) {\n  const {\n    status,\n    message\n  } = parseAuthenticationError(err);\n  const errorType = message || status;\n\n  switch (errorType) {\n    case \"invalid username\":\n      setError(prevErr => ({ ...prevErr,\n        email: \"Invalid email address.\"\n      }));\n      break;\n\n    case \"invalid username/password\":\n    case \"invalid password\":\n    case \"401\":\n      setError(err => ({ ...err,\n        password: \"Incorrect password.\"\n      }));\n      break;\n\n    case \"name already in use\":\n    case \"409\":\n      setError(err => ({ ...err,\n        email: \"Email is already registered.\"\n      }));\n      break;\n\n    case \"password must be between 6 and 128 characters\":\n    case \"400\":\n      setError(err => ({ ...err,\n        password: \"Password must be between 6 and 128 characters.\"\n      }));\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction parseAuthenticationError(err) {\n  var _match$groups;\n\n  const parts = err.message.split(\":\");\n  const reason = parts[parts.length - 1].trimStart();\n  if (!reason) return {\n    status: \"\",\n    message: \"\"\n  };\n  const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n  const match = reason.match(reasonRegex);\n  const {\n    status,\n    message\n  } = (_match$groups = match === null || match === void 0 ? void 0 : match.groups) !== null && _match$groups !== void 0 ? _match$groups : {};\n  return {\n    status,\n    message\n  };\n}\n\nconst Card = styled(LGCard)`\n  width: 420px;\n`;\nconst ToggleContainer = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n`;\nconst ToggleText = styled.span`\n  line-height: 18px;\n`;\nconst ToggleLink = styled.button`\n  background: none;\n  border: none;\n  font-size: 12px;\n  color: ${uiColors.green.dark2};\n`;\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  background: ${uiColors.gray.light2};\n`;\nconst LoginHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n`;\nconst LoginFormRow = styled.div`\n  margin-bottom: 16px;\n`;","map":{"version":3,"names":["React","Realm","useRealmApp","styled","Button","TextInput","LGCard","uiColors","validator","Loading","LoginScreen","app","mode","setMode","useState","toggleMode","oldMode","email","setEmail","password","setPassword","error","setError","useEffect","isLoggingIn","setIsLoggingIn","handleLogin","e","logIn","Credentials","emailPassword","err","handleAuthenticationError","handleRegistrationAndLogin","isValidEmailAddress","isEmail","emailPasswordAuth","registerUser","target","value","preventDefault","status","message","parseAuthenticationError","errorType","prevErr","parts","split","reason","length","trimStart","reasonRegex","match","groups","Card","ToggleContainer","div","ToggleText","span","ToggleLink","button","green","dark2","Container","gray","light2","LoginHeading","h1","LoginFormRow"],"sources":["/Users/scapista/code/hackathon/group-7-hackathon-backend/frontend/src/components/LoginScreen.js"],"sourcesContent":["import React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"../RealmApp\";\nimport styled from \"@emotion/styled\";\nimport Button from \"@leafygreen-ui/button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport LGCard from \"./Card\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport validator from \"validator\";\nimport Loading from \"./Loading\";\n\nexport default function LoginScreen() {\n  const app = useRealmApp();\n  // Toggle between logging users in and registering new users\n  const [mode, setMode] = React.useState(\"login\");\n  const toggleMode = () => {\n    setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\n  };\n  // Keep track of form input state\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  // Keep track of input validation/errors\n  const [error, setError] = React.useState({});\n  // Whenever the mode changes, clear the form inputs\n  React.useEffect(() => {\n    setEmail(\"email@company.com\");\n    setPassword(\"password\");\n    setError({});\n  }, [mode]);\n\n  const [isLoggingIn, setIsLoggingIn] = React.useState(false);\n  const handleLogin = async () => {\n    setIsLoggingIn(true);\n    setError((e) => ({ ...e, password: null }));\n    try {\n      // TODO: Call the logIn() method and pass it the emailPassword credentials.\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n    } catch (err) {\n      handleAuthenticationError(err, setError);\n    }\n  };\n\n  const handleRegistrationAndLogin = async () => {\n    const isValidEmailAddress = validator.isEmail(email);\n    setError((e) => ({ ...e, password: null }));\n    if (isValidEmailAddress) {\n      try {\n        // Register the user and, if successful, log them in\n        // TODO: Create new emailPassword credentials by calling the registerUser() method.\n        await app.emailPasswordAuth.registerUser(email, password);\n        return await handleLogin();\n      } catch (err) {\n        handleAuthenticationError(err, setError);\n      }\n    } else {\n      setError((err) => ({ ...err, email: \"Email is invalid.\" }));\n    }\n  };\n\n  return (\n    <Container>\n      {isLoggingIn ? (\n        <Loading />\n      ) : (\n        <Card>\n          <LoginFormRow>\n            <LoginHeading>\n              {mode === \"login\" ? \"Log In\" : \"Register a Company\"}\n            </LoginHeading>\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"email\"\n              label=\"Email\"\n              placeholder=\"your.email@example.com\"\n              onChange={(e) => {\n                setError((e) => ({ ...e, email: null }));\n                setEmail(e.target.value);\n              }}\n              value={email}\n              state={\n                error.email\n                  ? \"error\"\n                  : validator.isEmail(email)\n                  ? \"valid\"\n                  : \"none\"\n              }\n              errorMessage={error.email}\n            />\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"pa55w0rd\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n              value={password}\n              state={\n                error.password ? \"error\" : error.password ? \"valid\" : \"none\"\n              }\n              errorMessage={error.password}\n            />\n          </LoginFormRow>\n          {mode === \"login\" ? (\n            <Button variant=\"primary\" onClick={() => handleLogin()}>\n              Log In\n            </Button>\n          ) : (\n            <Button\n              variant=\"primary\"\n              onClick={() => handleRegistrationAndLogin()}\n            >\n              Register\n            </Button>\n          )}\n          <ToggleContainer>\n            <ToggleText>\n              {mode === \"login\"\n                ? \"Don't have an account?\"\n                : \"Already have an account?\"}\n            </ToggleText>\n            <ToggleLink\n              onClick={(e) => {\n                e.preventDefault();\n                toggleMode();\n              }}\n            >\n              {mode === \"login\" ? \"Register one now.\" : \"Log in instead.\"}\n            </ToggleLink>\n          </ToggleContainer>\n        </Card>\n      )}\n    </Container>\n  );\n}\n\nfunction handleAuthenticationError(err, setError) {\n  const { status, message } = parseAuthenticationError(err);\n  const errorType = message || status;\n  switch (errorType) {\n    case \"invalid username\":\n      setError((prevErr) => ({ ...prevErr, email: \"Invalid email address.\" }));\n      break;\n    case \"invalid username/password\":\n    case \"invalid password\":\n    case \"401\":\n      setError((err) => ({ ...err, password: \"Incorrect password.\" }));\n      break;\n    case \"name already in use\":\n    case \"409\":\n      setError((err) => ({ ...err, email: \"Email is already registered.\" }));\n      break;\n    case \"password must be between 6 and 128 characters\":\n    case \"400\":\n      setError((err) => ({\n        ...err,\n        password: \"Password must be between 6 and 128 characters.\",\n      }));\n      break;\n    default:\n      break;\n  }\n}\n\nfunction parseAuthenticationError(err) {\n  const parts = err.message.split(\":\");\n  const reason = parts[parts.length - 1].trimStart();\n  if (!reason) return { status: \"\", message: \"\" };\n  const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n  const match = reason.match(reasonRegex);\n  const { status, message } = match?.groups ?? {};\n  return { status, message };\n}\n\nconst Card = styled(LGCard)`\n  width: 420px;\n`;\nconst ToggleContainer = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ToggleText = styled.span`\n  line-height: 18px;\n`;\n\nconst ToggleLink = styled.button`\n  background: none;\n  border: none;\n  font-size: 12px;\n  color: ${uiColors.green.dark2};\n`;\n\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  background: ${uiColors.gray.light2};\n`;\n\nconst LoginHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n`;\n\nconst LoginFormRow = styled.div`\n  margin-bottom: 16px;\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}