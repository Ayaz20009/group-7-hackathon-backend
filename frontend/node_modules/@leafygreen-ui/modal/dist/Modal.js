var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback, useRef } from 'react';
import PropTypes from 'prop-types';
import { Transition } from 'react-transition-group';
import { transparentize } from 'polished';
import facepaint from 'facepaint';
import Portal from '@leafygreen-ui/portal';
import XIcon from '@leafygreen-ui/icon/dist/X';
import IconButton from '@leafygreen-ui/icon-button';
import { useEscapeKey } from '@leafygreen-ui/hooks';
import { uiColors } from '@leafygreen-ui/palette';
import { css, cx } from '@leafygreen-ui/emotion';
export var ModalSize = {
    Small: 'small',
    Default: 'default',
    Large: 'large',
};
// breakpoints for different screen sizes
var small = '767px'; // mobile screens, from 0px - 767px
var medium = '768px'; // tablet screens, from 768px - 1024px
var large = '1025px'; // laptops/desktop screens, from 1025px and above
export var mq = facepaint([
    "@media only screen and (max-width: " + small + ")",
    "@media only screen and (min-width: " + medium + ")",
    "@media only screen and (min-width: " + large + ")",
]);
var defaultHorizontalSpacing = 18;
var defaultVerticalSpacing = 64;
var backdrop = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background-color: ", ";\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  transition: opacity 150ms ease-in-out;\n"], ["\n  background-color: ", ";\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  transition: opacity 150ms ease-in-out;\n"])), transparentize(0.4, uiColors.black));
var visibleBackdrop = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  opacity: 1;\n"], ["\n  opacity: 1;\n"])));
var scrollContainer = css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  position: absolute;\n  min-height: 100%;\n  width: 100%;\n\n  padding: ", "px ", "px;\n  overflow-y: auto;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"], ["\n  position: absolute;\n  min-height: 100%;\n  width: 100%;\n\n  padding: ", "px ", "px;\n  overflow-y: auto;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"])), defaultVerticalSpacing, defaultHorizontalSpacing);
var modalContentStyle = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  transition: all 150ms ease-in-out;\n  margin: auto;\n  max-height: calc(100% - ", "px);\n  padding: 32px;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 7px;\n  box-shadow: 0 5px 15px ", ";\n  position: relative;\n  pointer-events: all;\n  transform: translate3d(0, -16px, 0);\n  opacity: 0;\n\n  &:focus {\n    outline: none;\n  }\n"], ["\n  transition: all 150ms ease-in-out;\n  margin: auto;\n  max-height: calc(100% - ", "px);\n  padding: 32px;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 7px;\n  box-shadow: 0 5px 15px ", ";\n  position: relative;\n  pointer-events: all;\n  transform: translate3d(0, -16px, 0);\n  opacity: 0;\n\n  &:focus {\n    outline: none;\n  }\n"])), defaultVerticalSpacing, uiColors.gray.dark3, uiColors.white, transparentize(0.4, uiColors.black));
var visibleModalContentStyle = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  transform: translate3d(0, 0, 0);\n  opacity: 1;\n"], ["\n  transform: translate3d(0, 0, 0);\n  opacity: 1;\n"])));
var modalSizes = {
    small: css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    width: 400px;\n  "], ["\n    width: 400px;\n  "]))),
    default: css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    width: 600px;\n  "], ["\n    width: 600px;\n  "]))),
    large: css(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n    ", "\n  "], ["\n    ",
        "\n  "])), mq({
        width: ['720px', '720px', '960px'],
    })),
};
var closeButton = css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  color: ", ";\n  position: absolute;\n  cursor: pointer;\n  // x-icon should be 16px from edge. IconButton is 28x28 and Icon is 16x16\n  // so there's already (28 - 16) / 2 = 6px of spacing. 16 - 6 = 10.\n  right: 10px;\n  top: 10px;\n\n  &:hover {\n    color: ", ";\n  }\n"], ["\n  color: ", ";\n  position: absolute;\n  cursor: pointer;\n  // x-icon should be 16px from edge. IconButton is 28x28 and Icon is 16x16\n  // so there's already (28 - 16) / 2 = 6px of spacing. 16 - 6 = 10.\n  right: 10px;\n  top: 10px;\n\n  &:hover {\n    color: ", ";\n  }\n"])), uiColors.gray.dark1, uiColors.gray.dark3);
/**
 * # Modal
 *
 *  Modals place content on top of main window.
 *
```
<Modal
  open
  size="large"
  setOpen={setOpen}
  shouldClose={() => console.log('Modal is closing now!')}
  >
  Modal content!
</Modal>
```
 * @param props.open Boolean to describe whether or not Modal is open.
 * @param props.size String to determine size of Modal. ['small', 'default', 'large']
 * @param props.setOpen Callback to change the open state of Modal.
 * @param props.children Content to appear inside of Modal container.
 * @param props.shouldClose Callback to determine whether or not Modal should close when user tries to close it.
 * @param props.className className applied to container div.
 * @param props.contentClassName className applied to overlay div.
 * @param props.closeOnBackdropClick Determines whether or not a Modal should close when a user clicks outside the modal.
 *
 */
function Modal(_a) {
    var _b = _a.open, open = _b === void 0 ? false : _b, _c = _a.size, size = _c === void 0 ? ModalSize.Default : _c, _d = _a.setOpen, setOpen = _d === void 0 ? function () { } : _d, _e = _a.shouldClose, shouldClose = _e === void 0 ? function () { return true; } : _e, _f = _a.closeOnBackdropClick, closeOnBackdropClick = _f === void 0 ? true : _f, children = _a.children, className = _a.className, contentClassName = _a.contentClassName, rest = __rest(_a, ["open", "size", "setOpen", "shouldClose", "closeOnBackdropClick", "children", "className", "contentClassName"]);
    var scrollContainerRef = useRef(null);
    var nodeRef = React.useRef(null);
    var handleClose = useCallback(function () {
        if (setOpen && shouldClose()) {
            setOpen(false);
        }
    }, [setOpen, shouldClose]);
    var handleBackdropClick = function (e) {
        if (closeOnBackdropClick && e.target === (scrollContainerRef === null || scrollContainerRef === void 0 ? void 0 : scrollContainerRef.current)) {
            handleClose();
        }
    };
    useEscapeKey(handleClose, { enabled: open });
    return (React.createElement(Transition, { in: open, timeout: 150, mountOnEnter: true, unmountOnExit: true, nodeRef: nodeRef }, function (state) {
        var _a, _b;
        return (React.createElement(Portal, null,
            React.createElement("div", __assign({ ref: nodeRef }, rest, { 
                // Setting role to 'none', because elements with a click event should have a specific role
                // Here we are just using a div to handle backdrop clicks, so this is the most appropriate value
                role: "none", onClick: handleBackdropClick, className: cx(className, backdrop, (_a = {},
                    _a[visibleBackdrop] = state === 'entered',
                    _a)) }),
                React.createElement("div", { className: scrollContainer, ref: scrollContainerRef },
                    React.createElement("div", { "aria-modal": "true", role: "dialog", tabIndex: -1, className: cx(modalContentStyle, modalSizes[size], (_b = {},
                            _b[visibleModalContentStyle] = state === 'entered',
                            _b), contentClassName) },
                        React.createElement(IconButton, { onClick: handleClose, "aria-label": "Close modal", className: closeButton },
                            React.createElement(XIcon, null)),
                        children)))));
    }));
}
Modal.displayName = 'Modal';
Modal.propTypes = {
    open: PropTypes.bool,
    size: PropTypes.string,
    children: PropTypes.node,
    shouldClose: PropTypes.func,
    className: PropTypes.string,
    setOpen: PropTypes.func,
};
export default Modal;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=Modal.js.map