import React, { SetStateAction } from 'react';
import PropTypes from 'prop-types';
import facepaint from 'facepaint';
export declare const ModalSize: {
    readonly Small: "small";
    readonly Default: "default";
    readonly Large: "large";
};
export declare type ModalSize = typeof ModalSize[keyof typeof ModalSize];
export declare const mq: facepaint.DynamicStyleFunction;
interface ModalProps {
    /**
     * Content that will appear inside of the Modal component.
     */
    children: React.ReactNode;
    /**
     * Determines the open state of the modal
     * @default: `false`
     */
    open?: boolean;
    /**
     * Specifies the size of the Modal.
     *
     * default: `default`
     */
    size?: ModalSize;
    /**
     * Callback to change the open state of the Modal.
     *
     */
    setOpen?: (open: boolean) => void | React.Dispatch<SetStateAction<boolean>>;
    /**
     * Callback to determine whether or not Modal should close when user tries to close it.
     *
     */
    shouldClose?: () => boolean;
    /**
     * Determines whether or not a Modal should close when a user clicks outside the modal.
     * @default: `true`
     */
    closeOnBackdropClick?: boolean;
    /**
     * className applied to root div.
     */
    className?: string;
    /**
     * className applied to overlay div.
     * Disclaimer: This prop may be deprecated in future versions of Modal
     */
    contentClassName?: string;
}
/**
 * # Modal
 *
 *  Modals place content on top of main window.
 *
```
<Modal
  open
  size="large"
  setOpen={setOpen}
  shouldClose={() => console.log('Modal is closing now!')}
  >
  Modal content!
</Modal>
```
 * @param props.open Boolean to describe whether or not Modal is open.
 * @param props.size String to determine size of Modal. ['small', 'default', 'large']
 * @param props.setOpen Callback to change the open state of Modal.
 * @param props.children Content to appear inside of Modal container.
 * @param props.shouldClose Callback to determine whether or not Modal should close when user tries to close it.
 * @param props.className className applied to container div.
 * @param props.contentClassName className applied to overlay div.
 * @param props.closeOnBackdropClick Determines whether or not a Modal should close when a user clicks outside the modal.
 *
 */
declare function Modal({ open, size, setOpen, shouldClose, closeOnBackdropClick, children, className, contentClassName, ...rest }: ModalProps): JSX.Element;
declare namespace Modal {
    var displayName: string;
    var propTypes: {
        open: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        shouldClose: PropTypes.Requireable<(...args: any[]) => any>;
        className: PropTypes.Requireable<string>;
        setOpen: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Modal;
//# sourceMappingURL=Modal.d.ts.map