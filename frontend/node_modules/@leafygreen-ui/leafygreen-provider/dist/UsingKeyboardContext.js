import React, { createContext, useContext, useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import { useEventListener } from '@leafygreen-ui/hooks';
export var UsingKeyboardContext = createContext({
    usingKeyboard: true,
    setUsingKeyboard: function () { },
});
// All keys here are used to manage focus through keyboard interaction.
export var NavigationKeyCodes = {
    tab: 9,
    leftArrow: 37,
    upArrow: 38,
    rightArrow: 39,
    downArrow: 40,
};
export function useUsingKeyboardContext() {
    return useContext(UsingKeyboardContext);
}
function UsingKeyboardProvider(_a) {
    var children = _a.children;
    var _b = useState(false), usingKeyboard = _b[0], setUsingKeyboard = _b[1];
    useEventListener('mousedown', function () { return setUsingKeyboard(false); }, {
        enabled: usingKeyboard,
    });
    useEventListener('keydown', function (_a) {
        var keyCode = _a.keyCode;
        if (Object.values(NavigationKeyCodes).includes(keyCode)) {
            setUsingKeyboard(true);
        }
    }, { enabled: !usingKeyboard });
    var providerValue = useMemo(function () { return ({
        usingKeyboard: usingKeyboard,
        setUsingKeyboard: setUsingKeyboard,
    }); }, [usingKeyboard]);
    return (React.createElement(UsingKeyboardContext.Provider, { value: providerValue }, children));
}
UsingKeyboardProvider.displayName = 'UsingKeyboardProvider';
UsingKeyboardProvider.propTypes = { children: PropTypes.node };
export default UsingKeyboardProvider;
//# sourceMappingURL=UsingKeyboardContext.js.map