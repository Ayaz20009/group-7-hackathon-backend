import { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { createPortal } from 'react-dom';
function createPortalContainer() {
    var el = document.createElement('div');
    document.body.appendChild(el);
    return el;
}
function Portal(props) {
    // Make container initially undefined so that the portal is not created
    // or rendered on initial render. This allows server-side rendering since:
    //  - ReactDOMServer cannot render portals
    //  - A component's initial hydrated render should match the server render
    var _a = useState(), container = _a[0], setContainer = _a[1];
    useEffect(function () {
        if (props.container) {
            setContainer(props.container);
        }
        else {
            var defaultContainer_1 = createPortalContainer();
            setContainer(defaultContainer_1);
            return function () {
                defaultContainer_1.remove();
            };
        }
    }, [props.container]);
    useEffect(function () {
        var _a;
        if (container && !props.container) {
            container.className = (_a = props.className) !== null && _a !== void 0 ? _a : '';
        }
    }, [container, props.container, props.className]);
    if (!container) {
        return null;
    }
    return createPortal(props.children, container);
}
Portal.displayName = 'Portal';
Portal.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    container: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),
};
export default Portal;
//# sourceMappingURL=Portal.js.map