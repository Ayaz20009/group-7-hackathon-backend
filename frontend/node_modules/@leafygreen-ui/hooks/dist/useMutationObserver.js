import { useEffect, useState } from 'react';
/**
 * Hook to subscribe to changes on the DOM.
 * @param target HTML element that is subscribed to DOM changes.
 * @param options Object with information about what DOM changes to subscribe to.
 * @param callback Callback function to execute inside of MutationObserver instance.
 * @param enabled Determines whether or not the hook should run, defaults to true.
 */
export default function useMutationObserver(target, options, callback, enabled) {
    if (enabled === void 0) { enabled = true; }
    var _a = useState(), value = _a[0], setValue = _a[1];
    useEffect(function () {
        if (!enabled) {
            return;
        }
        var observer = new MutationObserver(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            setValue(callback.apply(void 0, args));
        });
        if (target) {
            observer.observe(target, options);
        }
        return function () { return observer.disconnect(); };
    }, [target, options, callback, enabled]);
    return value;
}
//# sourceMappingURL=useMutationObserver.js.map