var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a, _b, _c, _d;
import React from 'react';
import { css, cx } from '@leafygreen-ui/emotion';
import PropTypes from 'prop-types';
import Box from '@leafygreen-ui/box';
import { isComponentType } from '@leafygreen-ui/lib';
import { uiColors } from '@leafygreen-ui/palette';
var Mode = {
    Light: 'light',
    Dark: 'dark',
};
var Size = {
    Default: 'default',
    Large: 'large',
    XLarge: 'xlarge',
};
export { Size };
var removeButtonStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  border: none;\n  -webkit-appearance: unset;\n  padding: unset;\n"], ["\n  border: none;\n  -webkit-appearance: unset;\n  padding: unset;\n"])));
var baseIconButtonStyle = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: inline-block;\n  border-radius: 100px;\n  color: ", ";\n  position: relative;\n  cursor: pointer;\n  flex-shrink: 0;\n\n  // Set background to fully-transparent white for cross-browser compatability with Safari\n  //\n  // Safari treats \"transparent\" values in CSS as transparent black instead of white\n  // which can make things render differently across browsers if not defined explicitly.\n  background-color: rgba(255, 255, 255, 0);\n\n  &:before {\n    content: '';\n    transition: 150ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 100%;\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  &:hover:before,\n  &:focus:before {\n    opacity: 1;\n    transform: scale(1);\n  }\n\n  &:focus {\n    outline: none;\n  }\n"], ["\n  display: inline-block;\n  border-radius: 100px;\n  color: ", ";\n  position: relative;\n  cursor: pointer;\n  flex-shrink: 0;\n\n  // Set background to fully-transparent white for cross-browser compatability with Safari\n  //\n  // Safari treats \"transparent\" values in CSS as transparent black instead of white\n  // which can make things render differently across browsers if not defined explicitly.\n  background-color: rgba(255, 255, 255, 0);\n\n  &:before {\n    content: '';\n    transition: 150ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 100%;\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  &:hover:before,\n  &:focus:before {\n    opacity: 1;\n    transform: scale(1);\n  }\n\n  &:focus {\n    outline: none;\n  }\n"])), uiColors.gray.base);
var iconButtonSizes = (_a = {},
    _a[Size.Default] = css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    height: 28px;\n    width: 28px;\n  "], ["\n    height: 28px;\n    width: 28px;\n  "]))),
    _a[Size.Large] = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    height: 35px;\n    width: 35px;\n  "], ["\n    height: 35px;\n    width: 35px;\n  "]))),
    _a[Size.XLarge] = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n    height: 42px;\n    width: 42px;\n  "], ["\n    height: 42px;\n    width: 42px;\n  "]))),
    _a);
var iconButtonMode = (_b = {},
    _b[Mode.Light] = css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    &:hover {\n      color: ", ";\n\n      &:before {\n        background-color: ", ";\n      }\n    }\n\n    &:focus {\n      color: ", ";\n\n      &:before {\n        background-color: ", ";\n      }\n    }\n  "], ["\n    &:hover {\n      color: ", ";\n\n      &:before {\n        background-color: ", ";\n      }\n    }\n\n    &:focus {\n      color: ", ";\n\n      &:before {\n        background-color: ", ";\n      }\n    }\n  "])), uiColors.gray.dark2, uiColors.gray.light2, uiColors.blue.base, uiColors.blue.light2),
    _b[Mode.Dark] = css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    &:hover {\n      &:before {\n        background-color: ", ";\n      }\n      color: ", ";\n    }\n    &:focus:before {\n      background-color: ", ";\n    }\n  "], ["\n    &:hover {\n      &:before {\n        background-color: ", ";\n      }\n      color: ", ";\n    }\n    &:focus:before {\n      background-color: ", ";\n    }\n  "])), uiColors.gray.dark2, uiColors.white, uiColors.blue.dark2),
    _b);
var disabledStyle = (_c = {},
    _c[Mode.Light] = css(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n    color: ", ";\n    pointer-events: none;\n  "], ["\n    color: ", ";\n    pointer-events: none;\n  "])), uiColors.gray.light2),
    _c[Mode.Dark] = css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n    color: ", ";\n    pointer-events: none;\n  "], ["\n    color: ", ";\n    pointer-events: none;\n  "])), uiColors.gray.dark2),
    _c);
var activeStyle = (_d = {},
    _d[Mode.Light] = css(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n    color: ", ";\n    background-color: ", ";\n\n    &:before {\n      background-color: ", ";\n    }\n  "], ["\n    color: ", ";\n    background-color: ", ";\n\n    &:before {\n      background-color: ", ";\n    }\n  "])), uiColors.gray.dark2, uiColors.gray.light2, uiColors.gray.light2),
    _d[Mode.Dark] = css(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n    color: ", ";\n    background-color: ", ";\n\n    &:before {\n      background-color: ", ";\n    }\n  "], ["\n    color: ", ";\n    background-color: ", ";\n\n    &:before {\n      background-color: ", ";\n    }\n  "])), uiColors.white, uiColors.gray.dark2, uiColors.gray.dark2),
    _d);
var iconStyle = css(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"], ["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"])));
function isComponentGlyph(child) {
    return (child != null &&
        typeof child === 'object' &&
        'type' in child &&
        child.type.isGlyph === true);
}
var IconButton = React.forwardRef(function (_a, ref) {
    var _b, _c, _d, _e;
    var _f = _a.size, size = _f === void 0 ? Size.Default : _f, _g = _a.darkMode, darkMode = _g === void 0 ? false : _g, _h = _a.disabled, disabled = _h === void 0 ? false : _h, _j = _a.active, active = _j === void 0 ? false : _j, className = _a.className, children = _a.children, ariaLabel = _a["aria-label"], ariaLabelledBy = _a["aria-labelledby"], rest = __rest(_a, ["size", "darkMode", "disabled", "active", "className", "children", 'aria-label', 'aria-labelledby']);
    var mode = darkMode ? 'dark' : 'light';
    // We do our own proptype validation here to ensure either 'aria-label' or 'aria-labelledby' are passed to the component.
    if (!ariaLabel && !ariaLabelledBy) {
        console.error('For screen-reader accessibility, aria-label or aria-labelledby must be provided to IconButton.');
    }
    var processedChildren = React.Children.map(children, function (child) {
        if (!child) {
            return null;
        }
        // Check to see if child is a LeafyGreen Icon or a LeafyGreen Glyph
        // If so, we unset the title and rely on the aria-label prop to give
        // information about the rendered content.
        if (isComponentType(child, 'Icon') || isComponentGlyph(child)) {
            var _a = child.props, childSize = _a.size, title = _a.title;
            var newChildProps = {
                size: childSize || size,
            };
            if (typeof title !== 'string' || title.length === 0) {
                // Unsets the title within an icon since the button itself will have
                // aria-label or aria-labelledby set.
                newChildProps.title = false;
            }
            return React.cloneElement(child, newChildProps);
        }
        return child;
    });
    var accessibleLabel = ariaLabel
        ? (_b = {}, _b['aria-label'] = ariaLabel, _b) : (_c = {}, _c['aria-labelledby'] = ariaLabelledBy, _c);
    var iconButtonProps = __assign(__assign(__assign({}, rest), accessibleLabel), (_d = { ref: ref, tabIndex: disabled ? -1 : 0 }, _d['aria-disabled'] = disabled, _d.className = cx(removeButtonStyle, baseIconButtonStyle, iconButtonSizes[size], iconButtonMode[mode], (_e = {},
        _e[disabledStyle[mode]] = disabled,
        _e[activeStyle[mode]] = active,
        _e), className), _d));
    if (typeof rest.href === 'string') {
        return (React.createElement(Box, __assign({ as: "a" }, iconButtonProps),
            React.createElement("div", { className: iconStyle }, processedChildren)));
    }
    return (React.createElement(Box, __assign({ as: "button" }, iconButtonProps),
        React.createElement("div", { className: iconStyle }, processedChildren)));
});
IconButton.displayName = 'IconButton';
// @ts-ignore: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37660
IconButton.propTypes = {
    darkMode: PropTypes.bool,
    size: PropTypes.oneOf(Object.values(Size)),
    className: PropTypes.string,
    children: PropTypes.node,
    disabled: PropTypes.bool,
    // @ts-ignore
    href: PropTypes.string,
    active: PropTypes.bool,
};
export default IconButton;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12;
//# sourceMappingURL=IconButton.js.map