var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
import React from 'react';
import PropTypes from 'prop-types';
import { uiColors } from '@leafygreen-ui/palette';
import { css, cx } from '@leafygreen-ui/emotion';
export var Variant = {
    DarkGray: 'darkgray',
    LightGray: 'lightgray',
    Red: 'red',
    Yellow: 'yellow',
    Blue: 'blue',
    Green: 'green',
};
export var baseStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: inline-flex;\n  align-items: center;\n  font-weight: bold;\n  font-size: 11px;\n  line-height: 20px;\n  border-radius: 50px;\n  height: 20px;\n  padding-left: 9px;\n  padding-right: 9px;\n  text-transform: uppercase;\n  border: 1px solid;\n"], ["\n  display: inline-flex;\n  align-items: center;\n  font-weight: bold;\n  font-size: 11px;\n  line-height: 20px;\n  border-radius: 50px;\n  height: 20px;\n  padding-left: 9px;\n  padding-right: 9px;\n  text-transform: uppercase;\n  border: 1px solid;\n"])));
export var badgeVariants = (_a = {},
    _a[Variant.LightGray] = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.gray.light3, uiColors.gray.light2, uiColors.gray.dark1),
    _a[Variant.DarkGray] = css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.gray.dark2, uiColors.gray.dark3, uiColors.white),
    _a[Variant.Red] = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.red.light3, uiColors.red.light2, uiColors.red.dark2),
    _a[Variant.Yellow] = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.yellow.light3, uiColors.yellow.light2, uiColors.yellow.dark2),
    _a[Variant.Blue] = css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.blue.light3, uiColors.blue.light2, uiColors.blue.dark2),
    _a[Variant.Green] = css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border-color: ", ";\n    color: ", ";\n  "])), uiColors.green.light3, uiColors.green.light2, uiColors.green.dark2),
    _a);
function Badge(_a) {
    var children = _a.children, _b = _a.variant, variant = _b === void 0 ? Variant.LightGray : _b, className = _a.className, rest = __rest(_a, ["children", "variant", "className"]);
    return (React.createElement("div", __assign({}, rest, { className: cx(baseStyle, badgeVariants[variant], className) }), children));
}
Badge.displayName = 'Badge';
Badge.propTypes = {
    className: PropTypes.string,
    children: PropTypes.node,
    variant: PropTypes.oneOf(Object.values(Variant)),
};
export default Badge;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=Badge.js.map