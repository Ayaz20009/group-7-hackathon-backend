var IdAllocator = /** @class */ (function () {
    function IdAllocator(prefix) {
        this.value = 0;
        this.prefix = prefix;
    }
    IdAllocator.create = function (prefix) {
        var _a;
        var instance = (_a = this.registry.get(prefix)) !== null && _a !== void 0 ? _a : new IdAllocator(prefix);
        IdAllocator.registry.set(prefix, instance);
        return instance;
    };
    IdAllocator.prototype.generate = function () {
        return this.prefix + "-" + this.value++;
    };
    /* The following are only for testing!! */
    /**
     * Stores the current state of all instances into an object
     * that can be used with the `restore` method to return all
     * of the instances back to the previous point in time.
     * @returns snapshot
     */
    IdAllocator.snapshot = function () {
        var snapshot = {};
        this.registry.forEach(function (allocator) {
            snapshot[allocator.prefix] = allocator.value;
        });
        return snapshot;
    };
    /**
     * @param snapshot If provided, all instances will be reset
     * to the state they were in when the snapshot was created.
     * Otherwise, all instances will be reset to being as if
     * they were just created.
     */
    IdAllocator.restore = function (snapshot) {
        var _this = this;
        this.registry.forEach(function (allocator) {
            if (!snapshot || !(allocator.prefix in snapshot)) {
                allocator.value = 0;
            }
        });
        if (snapshot) {
            Object.entries(snapshot).forEach(function (_a) {
                var _b;
                var prefix = _a[0], value = _a[1];
                var instance = (_b = _this.registry.get(prefix)) !== null && _b !== void 0 ? _b : _this.create(prefix);
                instance.value = value;
            });
        }
    };
    IdAllocator.registry = new Map();
    return IdAllocator;
}());
export default IdAllocator;
//# sourceMappingURL=IdAllocator.js.map