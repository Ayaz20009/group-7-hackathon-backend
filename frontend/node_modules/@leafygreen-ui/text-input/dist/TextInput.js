var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import { css, cx } from '@leafygreen-ui/emotion';
import CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';
import WarningIcon from '@leafygreen-ui/icon/dist/Warning';
import { uiColors } from '@leafygreen-ui/palette';
import { useUsingKeyboardContext } from '@leafygreen-ui/leafygreen-provider';
import { createDataProp, IdAllocator, } from '@leafygreen-ui/lib';
var inputSelectorProp = createDataProp('input-selector');
var iconSelectorProp = createDataProp('icon-selector');
export var State = {
    None: 'none',
    Valid: 'valid',
    Error: 'error',
};
export var TextInputType = {
    Email: 'email',
    Password: 'password',
    Search: 'search',
    Text: 'text',
    Url: 'url',
    Tel: 'tel',
};
var interactionRing = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  transition: all 150ms ease-in-out;\n  transform: scale(0.9, 0.8);\n  border-radius: 7px;\n  position: absolute;\n  top: -3px;\n  bottom: -3px;\n  left: -3px;\n  right: -3px;\n  pointer-events: none;\n  background-color: ", ";\n"], ["\n  transition: all 150ms ease-in-out;\n  transform: scale(0.9, 0.8);\n  border-radius: 7px;\n  position: absolute;\n  top: -3px;\n  bottom: -3px;\n  left: -3px;\n  right: -3px;\n  pointer-events: none;\n  background-color: ", ";\n"])), uiColors.gray.light2);
var textInputStyle = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: column;\n"], ["\n  display: flex;\n  flex-direction: column;\n"])));
var labelStyle = css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  color: ", ";\n  font-size: 14px;\n  font-weight: bold;\n  line-height: 16px;\n  padding-bottom: 4px;\n"], ["\n  color: ", ";\n  font-size: 14px;\n  font-weight: bold;\n  line-height: 16px;\n  padding-bottom: 4px;\n"])), uiColors.gray.dark2);
var descriptionStyle = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  color: ", ";\n  font-size: 14px;\n  line-height: 16px;\n  font-weight: normal;\n  padding-bottom: 4px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n"], ["\n  color: ", ";\n  font-size: 14px;\n  line-height: 16px;\n  font-weight: normal;\n  padding-bottom: 4px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n"])), uiColors.gray.dark1);
var inputContainerStyle = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  position: relative;\n  display: flex;\n  align-items: center;\n  z-index: 0;\n"], ["\n  position: relative;\n  display: flex;\n  align-items: center;\n  z-index: 0;\n"])));
var inputStyle = css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  width: 100%;\n  height: 36px;\n  border-radius: 4px;\n  padding-left: 12px;\n  font-size: 14px;\n  font-weight: normal;\n  font-family: Akzidenz, \u2018Helvetica Neue\u2019, Helvetica, Arial, sans-serif;\n  background-color: ", ";\n  border: 1px solid;\n  z-index: 1;\n\n  &::placeholder {\n    color: ", ";\n  }\n\n  &:focus {\n    outline: none;\n    z-index: 2;\n    border-color: #9dd0e7;\n    transition: border-color 150ms ease-in-out;\n\n    & ~ ", " {\n      z-index: 2;\n    }\n  }\n\n  &:disabled {\n    background-color: ", ";\n  }\n"], ["\n  width: 100%;\n  height: 36px;\n  border-radius: 4px;\n  padding-left: 12px;\n  font-size: 14px;\n  font-weight: normal;\n  font-family: Akzidenz, \u2018Helvetica Neue\u2019, Helvetica, Arial, sans-serif;\n  background-color: ", ";\n  border: 1px solid;\n  z-index: 1;\n\n  &::placeholder {\n    color: ", ";\n  }\n\n  &:focus {\n    outline: none;\n    z-index: 2;\n    border-color: #9dd0e7;\n    transition: border-color 150ms ease-in-out;\n\n    & ~ ", " {\n      z-index: 2;\n    }\n  }\n\n  &:disabled {\n    background-color: ", ";\n  }\n"])), uiColors.white, uiColors.gray.base, iconSelectorProp.selector, uiColors.gray.light2);
var interactionRingFocusStyle = css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  ", ":focus ~ & {\n    background-color: #9dd0e7;\n    transform: scale(1);\n    z-index: 1;\n  }\n"], ["\n  ", ":focus ~ & {\n    background-color: #9dd0e7;\n    transform: scale(1);\n    z-index: 1;\n  }\n"])), inputSelectorProp.selector);
var interactionRingHoverStyle = css(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  ", ":hover ~ & {\n    transform: scale(1);\n  }\n"], ["\n  ", ":hover ~ & {\n    transform: scale(1);\n  }\n"])), inputSelectorProp.selector);
var inputIconStyle = css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  position: absolute;\n  display: flex;\n  align-items: center;\n  right: 12px;\n  z-index: 1;\n"], ["\n  position: absolute;\n  display: flex;\n  align-items: center;\n  right: 12px;\n  z-index: 1;\n"])));
var errorIconStyle = css(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n  color: ", ";\n"], ["\n  color: ", ";\n"])), uiColors.red.base);
var validIconStyle = css(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n  color: ", ";\n"], ["\n  color: ", ";\n"])), uiColors.green.base);
var optionalStyle = css(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n  color: ", ";\n  font-size: 12px;\n  font-style: italic;\n  font-weight: normal;\n"], ["\n  color: ", ";\n  font-size: 12px;\n  font-style: italic;\n  font-weight: normal;\n"])), uiColors.gray.dark1);
var errorMessageStyle = css(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n  color: ", ";\n  font-size: 14px;\n  height: 20px;\n  padding-top: 4px;\n  font-weight: normal;\n"], ["\n  color: ", ";\n  font-size: 14px;\n  height: 20px;\n  padding-top: 4px;\n  font-weight: normal;\n"])), uiColors.red.base);
function getStatefulInputStyles(state, optional) {
    switch (state) {
        case State.Valid: {
            return css(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n        padding-right: 30px;\n        border-color: ", ";\n      "], ["\n        padding-right: 30px;\n        border-color: ", ";\n      "])), uiColors.green.base);
        }
        case State.Error: {
            return css(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n        padding-right: 30px;\n        border-color: ", ";\n      "], ["\n        padding-right: 30px;\n        border-color: ", ";\n      "])), uiColors.red.base);
        }
        default: {
            return css(templateObject_16 || (templateObject_16 = __makeTemplateObject(["\n        padding-right: ", "px;\n        border-color: ", ";\n      "], ["\n        padding-right: ", "px;\n        border-color: ", ";\n      "])), optional ? 60 : 12, uiColors.gray.light1);
        }
    }
}
var idAllocator = IdAllocator.create('text-input');
/**
 * # TextInput
 *
 * TextInput component
 *
 * ```
<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>
```
 * @param props.id id associated with the TextInput component.
 * @param props.label Text shown in bold above the input element.
 * @param props.description Text that gives more detail about the requirements for the input.
 * @param props.optional Whether or not the field is optional.
 * @param props.disabled Whether or not the field is currently disabled.
 * @param props.onChange Callback to be executed when the value of the input field changes.
 * @param props.placeholder The placeholder text shown in the input field before the user begins typing.
 * @param props.errorMessage The message shown below the input field if the value is invalid.
 * @param props.state The current state of the TextInput. This can be none, valid, or error.
 * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.
 * @param props.className className supplied to the TextInput container.
 */
var TextInput = React.forwardRef(function (_a, forwardRef) {
    var _b;
    var label = _a.label, description = _a.description, onChange = _a.onChange, placeholder = _a.placeholder, errorMessage = _a.errorMessage, _c = _a.optional, optional = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.state, state = _e === void 0 ? State.None : _e, _f = _a.type, type = _f === void 0 ? TextInputType.Text : _f, propsId = _a.id, ariaLabelledBy = _a["aria-labelledby"], controlledValue = _a.value, className = _a.className, rest = __rest(_a, ["label", "description", "onChange", "placeholder", "errorMessage", "optional", "disabled", "state", "type", "id", 'aria-labelledby', "value", "className"]);
    var isControlled = typeof controlledValue === 'string';
    var _g = useState(''), uncontrolledValue = _g[0], setValue = _g[1];
    var value = isControlled ? controlledValue : uncontrolledValue;
    var showFocus = useUsingKeyboardContext().usingKeyboard;
    var id = useMemo(function () { return propsId !== null && propsId !== void 0 ? propsId : idAllocator.generate(); }, [propsId]);
    function onValueChange(e) {
        if (onChange) {
            onChange(e);
        }
        if (!isControlled) {
            setValue(e.target.value);
        }
    }
    if (!label && !ariaLabelledBy) {
        console.error('For screen-reader accessibility, label or aria-labelledby must be provided to IconButton.');
    }
    return (React.createElement("div", { className: cx(textInputStyle, className) },
        label && (React.createElement("label", { htmlFor: id, className: labelStyle }, label)),
        description && React.createElement("p", { className: descriptionStyle }, description),
        React.createElement("div", { className: inputContainerStyle },
            React.createElement("input", __assign({}, inputSelectorProp.prop, rest, { "aria-labelledby": ariaLabelledBy, type: type, className: cx(inputStyle, getStatefulInputStyles(state, optional)), value: value, required: !optional, disabled: disabled, placeholder: placeholder, onChange: onValueChange, ref: forwardRef, id: id })),
            React.createElement("div", __assign({}, iconSelectorProp.prop, { className: inputIconStyle }),
                state === State.Valid && (React.createElement(CheckmarkIcon, { className: validIconStyle })),
                state === State.Error && (React.createElement(WarningIcon, { className: errorIconStyle })),
                state === State.None && optional && (React.createElement("div", { className: optionalStyle },
                    React.createElement("p", null, "Optional")))),
            React.createElement("div", { className: cx(interactionRing, interactionRingHoverStyle, (_b = {},
                    _b[interactionRingFocusStyle] = showFocus,
                    _b)) })),
        state === State.Error && errorMessage && (React.createElement("div", { className: errorMessageStyle },
            React.createElement("label", null, errorMessage)))));
});
TextInput.displayName = 'TextInput';
TextInput.propTypes = {
    id: PropTypes.string,
    label: PropTypes.string,
    description: PropTypes.string,
    optional: PropTypes.bool,
    disabled: PropTypes.bool,
    onChange: PropTypes.func,
    placeholder: PropTypes.string,
    errorMessage: PropTypes.string,
    state: PropTypes.oneOf(Object.values(State)),
    value: PropTypes.string,
    className: PropTypes.string,
};
export default TextInput;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16;
//# sourceMappingURL=TextInput.js.map