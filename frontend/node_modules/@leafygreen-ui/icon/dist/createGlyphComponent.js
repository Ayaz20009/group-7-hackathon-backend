var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import PropTypes from 'prop-types';
import { css, cx } from '@leafygreen-ui/emotion';
import { getGlyphTitle, sizeMap, Size } from './glyphCommon';
export default function createGlyphComponent(glyphName, Glyph) {
    function GlyphComponent(_a) {
        var _b;
        var className = _a.className, _c = _a.size, size = _c === void 0 ? Size.Default : _c, title = _a.title, fill = _a.fill, rest = __rest(_a, ["className", "size", "title", "fill"]);
        var fillStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      color: ", ";\n    "], ["\n      color: ", ";\n    "])), fill);
        var renderedSize = typeof size === 'number' ? size : sizeMap[size];
        return (React.createElement(Glyph, __assign({ className: cx((_b = {},
                _b[fillStyle] = fill != null,
                _b), className), title: getGlyphTitle(glyphName, title), height: renderedSize, width: renderedSize }, rest)));
    }
    GlyphComponent.displayName = glyphName;
    GlyphComponent.isGlyph = true;
    GlyphComponent.propTypes = {
        fill: PropTypes.string,
        size: PropTypes.oneOfType([
            PropTypes.oneOf(Object.values(Size)),
            PropTypes.number,
        ]),
        className: PropTypes.string,
    };
    return GlyphComponent;
}
var templateObject_1;
//# sourceMappingURL=createGlyphComponent.js.map