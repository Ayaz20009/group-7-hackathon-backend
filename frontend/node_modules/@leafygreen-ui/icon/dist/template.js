"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
module.exports = function template(_a, _b, _c) {
    var template = _a.template;
    var componentName = _b.state.componentName;
    var imports = _c.imports, jsx = _c.jsx, exports = _c.exports;
    var typeScriptTpl = template.smart({ plugins: ['jsx', 'typescript'] });
    var jsxAttributes = typeScriptTpl.ast(__makeTemplateObject(["\n    <Glyph\n      className={cx(\n        {\n          [fillStyle]: fill != null,\n        },\n        className,\n      )}\n      height={typeof size === 'number' ? size : sizeMap[size]}\n      width={typeof size === 'number' ? size : sizeMap[size]}\n      {...props}\n    />"], ["\n    <Glyph\n      className={cx(\n        {\n          [fillStyle]: fill != null,\n        },\n        className,\n      )}\n      height={typeof size === 'number' ? size : sizeMap[size]}\n      width={typeof size === 'number' ? size : sizeMap[size]}\n      {...props}\n    />"]));
    // Augment the `<svg attributes />` so we can customize it with the values above.
    jsx.openingElement.attributes = jsxAttributes.expression.openingElement.attributes.concat(jsx.openingElement.attributes[2]);
    return typeScriptTpl("\n    %%imports%%\n    import PropTypes from 'prop-types';\n    import { css, cx } from '@leafygreen-ui/emotion';\n    import { IdAllocator } from '@leafygreen-ui/lib';\n    import { getGlyphTitle, sizeMap } from '../glyphCommon';\n    import { LGGlyph } from '../types';\n  \n    export interface " + componentName + "Props extends LGGlyph.ComponentProps {}\n\n    const idAllocator = IdAllocator.create('" + componentName + "');\n\n    const " + componentName + " = ({\n      className,\n      size = 16,\n      title,\n      titleId: customTitleId,\n      fill,\n      ...props\n    }: " + componentName + "Props) => {\n      const titleId = React.useMemo(\n        () => customTitleId || idAllocator.generate(),\n        [customTitleId]\n      );\n\n      const fillStyle = css`\n        color: ${fill};\n      `;\n\n      title = getGlyphTitle('" + componentName + "', title);\n\n      return %%jsx%%;\n    }\n\n    " + componentName + ".displayName = '" + componentName + "';\n\n    " + componentName + ".isGlyph = true;\n\n    " + componentName + ".propTypes = {\n        fill: PropTypes.string,\n        size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        className: PropTypes.string,\n    };\n\n    %%exports%%\n  ")({
        imports: imports,
        jsx: jsx,
        exports: exports,
    });
};
//# sourceMappingURL=template.js.map