var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/**
 * This is a generated file. Do not modify it manually.
 *
 * @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts
 * @checksum 7073f9a16a44e14430f7ee173663aba4
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, cx } from '@leafygreen-ui/emotion';
import { IdAllocator } from '@leafygreen-ui/lib';
import { getGlyphTitle, sizeMap } from '../glyphCommon';
var idAllocator = IdAllocator.create('MagnifyingGlass');
var MagnifyingGlass = function (_a) {
    var _b;
    var className = _a.className, _c = _a.size, size = _c === void 0 ? 16 : _c, title = _a.title, customTitleId = _a.titleId, fill = _a.fill, props = __rest(_a, ["className", "size", "title", "titleId", "fill"]);
    var titleId = React.useMemo(function () { return customTitleId || idAllocator.generate(); }, [
        customTitleId,
    ]);
    var fillStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    color: ", ";\n  "], ["\n    color: ", ";\n  "])), fill);
    title = getGlyphTitle('MagnifyingGlass', title);
    return (React.createElement("svg", __assign({ className: cx((_b = {},
            _b[fillStyle] = fill != null,
            _b), className), height: typeof size === 'number' ? size : sizeMap[size], width: typeof size === 'number' ? size : sizeMap[size] }, props, { viewBox: "0 0 16 16", role: "img", "aria-labelledby": titleId }),
        title === undefined ? (React.createElement("title", { id: titleId }, 'Glyphs / Magnifying Glass')) : title ? (React.createElement("title", { id: titleId }, title)) : null,
        React.createElement("desc", null, 'Created with Sketch.'),
        React.createElement("g", { id: "Glyphs-/-Magnifying-Glass", stroke: "none", strokeWidth: 1, fill: "none", fillRule: "evenodd" },
            React.createElement("path", { d: "M10.6246494,9.82290055 C10.8263905,9.85767278 11.0491384,9.87867966 11.2928932,9.87867966 L15.8890873,14.4748737 L14.4748737,15.8890873 L9.87867966,11.2928932 C9.87867966,11.0491384 9.85767278,10.8263905 9.82290055,10.6246494 C8.78482761,11.4837272 7.45270479,12 6,12 C2.6862915,12 2.66453526e-14,9.3137085 2.66453526e-14,6 C2.66453526e-14,2.6862915 2.6862915,1.77635684e-15 6,1.77635684e-15 C9.3137085,1.77635684e-15 12,2.6862915 12,6 C12,7.45270479 11.4837272,8.78482761 10.6246494,9.82290055 Z M6,10 C8.209139,10 10,8.209139 10,6 C10,3.790861 8.209139,2 6,2 C3.790861,2 2,3.790861 2,6 C2,8.209139 3.790861,10 6,10 Z M6,3 C7.65685425,3 9,4.34314575 9,6 L8,6 C8,4.8954305 7.1045695,4 6,4 L6,3 Z", fill: 'currentColor' }))));
};
MagnifyingGlass.displayName = 'MagnifyingGlass';
MagnifyingGlass.isGlyph = true;
MagnifyingGlass.propTypes = {
    fill: PropTypes.string,
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    className: PropTypes.string,
};
export default MagnifyingGlass;
var templateObject_1;
//# sourceMappingURL=MagnifyingGlass.js.map