var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/**
 * This is a generated file. Do not modify it manually.
 *
 * @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts
 * @checksum 1cac530567b9487ecd9e6c913e611d66
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, cx } from '@leafygreen-ui/emotion';
import { IdAllocator } from '@leafygreen-ui/lib';
import { getGlyphTitle, sizeMap } from '../glyphCommon';
var idAllocator = IdAllocator.create('Megaphone');
var Megaphone = function (_a) {
    var _b;
    var className = _a.className, _c = _a.size, size = _c === void 0 ? 16 : _c, title = _a.title, customTitleId = _a.titleId, fill = _a.fill, props = __rest(_a, ["className", "size", "title", "titleId", "fill"]);
    var titleId = React.useMemo(function () { return customTitleId || idAllocator.generate(); }, [
        customTitleId,
    ]);
    var fillStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    color: ", ";\n  "], ["\n    color: ", ";\n  "])), fill);
    title = getGlyphTitle('Megaphone', title);
    return (React.createElement("svg", __assign({ className: cx((_b = {},
            _b[fillStyle] = fill != null,
            _b), className), height: typeof size === 'number' ? size : sizeMap[size], width: typeof size === 'number' ? size : sizeMap[size] }, props, { viewBox: "0 0 16 16", role: "img", "aria-labelledby": titleId }),
        title === undefined ? (React.createElement("title", { id: titleId }, 'Glyphs / Megaphone')) : title ? (React.createElement("title", { id: titleId }, title)) : null,
        React.createElement("desc", null, 'Created with Sketch.'),
        React.createElement("g", { id: "Glyphs-/-Megaphone", stroke: "none", strokeWidth: 1, fill: "none", fillRule: "evenodd" },
            React.createElement("path", { d: "M15,7.09374998 C15,6.49376951 14.6852431,5.97554686 14.2222222,5.69421874 L14.2222222,1.8127539 C14.2222222,1.59058594 14.0525695,1 13.4444445,1 C13.2713889,1 13.0995486,1.06042969 12.9588195,1.17824219 L10.8921181,2.9055664 C9.85402781,3.77240233 8.55076391,4.24999999 7.22222225,4.24999999 L2.55555556,4.24999999 C1.69635417,4.24999999 1,4.9774414 1,5.87499998 L1,8.31249998 C1,9.21005856 1.69635417,9.93749997 2.55555556,9.93749997 L3.37465279,9.93749997 C3.34086806,10.2035937 3.32166667,10.4742578 3.32166667,10.75 C3.32166667,11.7597851 3.54673612,12.7139648 3.94291668,13.5668358 C4.06906252,13.8382616 4.34444446,14 4.63319445,14 L6.43861113,14 C7.07177086,14 7.45190974,13.2423437 7.06812502,12.7162499 C6.66951391,12.1698437 6.43253474,11.4883593 6.43253474,10.75 C6.43253474,10.4679101 6.47190974,10.1967382 6.53972224,9.93749997 L7.22222225,9.93749997 C8.55076391,9.93749997 9.85402781,10.4150976 10.891875,11.2819336 L12.9585765,13.0092578 C13.0964165,13.1244854 13.2676604,13.1873383 13.4442014,13.1875 C14.0498959,13.1875 14.2219792,12.6091015 14.2219792,12.375 L14.2219792,8.49353513 C14.6852431,8.21195309 15,7.69373044 15,7.09374998 Z M12.6666667,10.6844922 L11.8633681,10.013164 C10.5508681,8.91628904 8.90222225,8.31249998 7.22222225,8.31249998 L7.22222225,5.87499998 C8.90222225,5.87499998 10.5508681,5.27121092 11.8633681,4.17433592 L12.6666667,3.5030078 L12.6666667,10.6844922 Z", id: "Shape", fill: 'currentColor', fillRule: "nonzero" }))));
};
Megaphone.displayName = 'Megaphone';
Megaphone.isGlyph = true;
Megaphone.propTypes = {
    fill: PropTypes.string,
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    className: PropTypes.string,
};
export default Megaphone;
var templateObject_1;
//# sourceMappingURL=Megaphone.js.map